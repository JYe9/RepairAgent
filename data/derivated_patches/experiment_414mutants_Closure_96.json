[{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": ["1409", "           parameters.hasNext()) {"], "insertions": [], "deletions": [1409], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": ["1412", "//"], "insertions": [{"line_number": 1412, "new_lines": ["// Inserted line to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": ["1413", "//"], "insertions": [{"line_number": 1413, "new_lines": ["// Inserted line to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        JSType actualType = getJSType(actual);"]}, {"line_number": 1413, "new_lines": ["        JSType formalType = getJSType(formal);"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        if (parameters.hasNext()) {"]}, {"line_number": 1413, "new_lines": ["            Node parameter = parameters.next();"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        // Inserted line 1 to fix the bug", "        // Inserted line 2 to fix the bug"]}, {"line_number": 1413, "new_lines": ["        // Inserted line 3 to fix the bug"]}], "deletions": [1409], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        // New code added for bug fix", "        // Another new code added for bug fix"]}], "deletions": [1409], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        if (parameters.hasNext()) {", "            return;"]}, {"line_number": 1413, "new_lines": ["        // Inserted line for bug fix"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        // Fixing bug by adding new code here"]}, {"line_number": 1413, "new_lines": ["        // Additional code to address the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        // Potential fix for bug by adding code here"]}], "deletions": [1409], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        // New code inserted here to fix the issue"]}], "deletions": [1409], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        // Fix for bug goes here"]}, {"line_number": 1413, "new_lines": ["        // Additional fix for bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        // Inserted line to address bug"]}, {"line_number": 1413, "new_lines": ["        // Additional inserted line for bug fix"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        // Bug fix - new code added here"]}, {"line_number": 1413, "new_lines": ["        // Fixing bug with this new line"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        // Fixing bug by adding new code here"]}, {"line_number": 1413, "new_lines": ["        // Additional code to address the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        JSType actualType = getJSType(actual);", "        JSType formalType = getJSType(formal);", "        if (!actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString()));", "        "]}], "deletions": [1409], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        JSType actualType = getJSType(actual);", "        JSType formalType = getJSType(formal);", "        if (actualType != null && formalType != null && !actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString()));", "        "]}], "deletions": [1409], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        JSType actualType = getJSType(actual);", "        JSType formalType = getJSType(formal);", "        if (actualType != null && formalType != null && actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString()));", "        "]}], "deletions": [1409], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        JSType actualType = getJSType(actual) != null ? getJSType(actual) : JSType.UNKNOWN;", "        JSType formalType = getJSType(formal) != null ? getJSType(formal) : JSType.UNKNOWN;", "        if (actualType != null && formalType != null && actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString()));", "        "]}], "deletions": [1409], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        JSType actualType = getJSType(actual) != null ? getJSType(actual) : JSType.UNKNOWN;", "        JSType formalType = getJSType(formal) != null ? getJSType(formal) : JSType.UNKNOWN;", "        if (actualType != null && formalType != null && actualType != JSType.UNKNOWN && formalType != JSType.UNKNOWN && actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString()));", "        "]}], "deletions": [1409], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        JSType actualType = getJSType(actual);", "        JSType formalType = getJSType(formal);", "        if (!actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString()));"]}], "deletions": [1409], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        // Mutant 1: Adding a null check for 'parameters' before accessing it", "        if (parameters != null && parameters.hasNext()) {"]}, {"line_number": 1413, "new_lines": ["        // Mutant 1: Adding a null check for 'parameters' before accessing it", "        Node parameter = parameters.next();"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        JSType actualType = getJSType(actual);", "        JSType formalType = getJSType(formal);", "        if (!actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString()));"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        JSType actualType = getJSType(actual);", "        JSType formalType = getJSType(formal);", "        if (actualType != null && formalType != null && !actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString()));"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        JSType actualType = getJSType(actual);", "        JSType formalType = getJSType(formal);", "        if (actualType != null && formalType != null && actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString()));"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        JSType actualType = getJSType(actual) != null ? getJSType(actual) : JSType.UNKNOWN;", "        JSType formalType = getJSType(formal) != null ? getJSType(formal) : JSType.UNKNOWN;", "        if (actualType != null && formalType != null && actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString()));"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        JSType actualType = getJSType(actual) != null ? getJSType(actual) : JSType.UNKNOWN;", "        JSType formalType = getJSType(formal) != null ? getJSType(formal) : JSType.UNKNOWN;", "        if (actualType != null && formalType != null && actualType != JSType.UNKNOWN && formalType != JSType.UNKNOWN && actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString());"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        JSType actualType = getJSType(actual);", "        JSType formalType = getJSType(formal);", "        if (!actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString());"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        JSType actualType = getJSType(actual);", "        JSType formalType = getJSType(formal);", "        if (actualType != null && formalType != null && !actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString());"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        JSType actualType = getJSType(actual) != null ? getJSType(actual) : JSType.UNKNOWN;", "        JSType formalType = getJSType(formal) != null ? getJSType(formal) : JSType.UNKNOWN;", "        if (actualType != null && formalType != null && actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString());"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        JSType actualType = getJSType(actual);", "        JSType formalType = getJSType(formal);", "        if (!actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString());"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        JSType actualType = getJSType(actual);", "        JSType formalType = getJSType(formal);", "        if (actualType != null && formalType != null && !actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString());"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        JSType actualType = getJSType(actual);", "        JSType formalType = getJSType(formal);", "        if (actualType != null && formalType != null && actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString());"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        JSType actualType = getJSType(actual) != null ? getJSType(actual) : JSType.UNKNOWN;", "        JSType formalType = getJSType(formal) != null ? getJSType(formal) : JSType.UNKNOWN;", "        if (actualType != null && formalType != null && actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString());"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        JSType actualType = getJSType(actual);", "        JSType formalType = getJSType(formal);", "        if (!actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString());"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        JSType actualType = getJSType(actual);", "        JSType formalType = getJSType(formal);", "        if (actualType != null && formalType != null && !actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString());"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        JSType actualType = getJSType(actual);", "        JSType formalType = getJSType(formal);", "        if (actualType != null && formalType != null && actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString());"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        JSType actualType = getJSType(actual) != null ? getJSType(actual) : JSType.UNKNOWN;", "        JSType formalType = getJSType(formal) != null ? getJSType(formal) : JSType.UNKNOWN;", "        if (actualType != null && formalType != null && actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString());"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        JSType actualType = getJSType(actual);", "        JSType formalType = getJSType(formal);", "        if (!actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString());"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        JSType actualType = getJSType(actual);", "        JSType formalType = getJSType(formal);", "        if (actualType != null && formalType != null && !actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString());"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        JSType actualType = getJSType(actual);", "        JSType formalType = getJSType(formal);", "        if (actualType != null && formalType != null && actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString());"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        JSType actualType = getJSType(actual) != null ? getJSType(actual) : JSType.UNKNOWN;", "        JSType formalType = getJSType(formal) != null ? getJSType(formal) : JSType.UNKNOWN;", "        if (actualType != null && formalType != null && actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString());"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        JSType actualType = getJSType(actual);", "        JSType formalType = getJSType(formal);", "        if (!actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString());"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        JSType actualType = getJSType(actual);", "        JSType formalType = getJSType(formal);", "        if (actualType != null && formalType != null && !actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString());"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        JSType actualType = getJSType(actual);", "        JSType formalType = getJSType(formal);", "        if (actualType != null && formalType != null && actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString());"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "//"], ["1413", "//"]], "insertions": [{"line_number": 1412, "new_lines": ["        JSType actualType = getJSType(actual) != null ? getJSType(actual) : JSType.UNKNOWN;", "        JSType formalType = getJSType(formal) != null ? getJSType(formal) : JSType.UNKNOWN;", "        if (actualType != null && formalType != null && actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString());"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "        parameter = parameters.next();"], ["1413", "      argument = arguments.next();"]], "insertions": [{"line_number": 1412, "new_lines": ["        JSType actualType = getJSType(actual);", "        JSType formalType = getJSType(formal);", "        if (!actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString()));"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "        parameter = parameters.next();"], ["1413", "      argument = arguments.next();"]], "insertions": [{"line_number": 1412, "new_lines": ["        JSType actualType = getJSType(actual);", "        JSType formalType = getJSType(formal);", "        if (actualType != null && formalType != null && !actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString()));"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "        parameter = parameters.next();"], ["1413", "      argument = arguments.next();"]], "insertions": [{"line_number": 1412, "new_lines": ["        JSType actualType = getJSType(actual);", "        JSType formalType = getJSType(formal);", "        if (actualType != null && formalType != null && actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString()));"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "        parameter = parameters.next();"], ["1413", "      argument = arguments.next();"]], "insertions": [{"line_number": 1412, "new_lines": ["        JSType actualType = getJSType(actual) != null ? getJSType(actual) : JSType.UNKNOWN;", "        JSType formalType = getJSType(formal) != null ? getJSType(formal) : JSType.UNKNOWN;", "        if (actualType != null && formalType != null && actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString()));"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "        parameter = parameters.next();"], ["1413", "      argument = arguments.next();"]], "insertions": [{"line_number": 1412, "new_lines": ["        JSType actualType = getJSType(actual) != null ? getJSType(actual) : JSType.UNKNOWN;", "        JSType formalType = getJSType(formal) != null ? getJSType(formal) : JSType.UNKNOWN;", "        if (actualType != null && formalType != null && actualType != JSType.UNKNOWN && formalType != JSType.UNKNOWN && actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString()));"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "        parameter = parameters.next();"], ["1413", "      argument = arguments.next();"]], "insertions": [{"line_number": 1413, "new_lines": ["        JSType actualType = getJSType(actual);", "        JSType formalType = getJSType(formal);", "        if (!actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString()));"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "        parameter = parameters.next();"], ["1413", "      argument = arguments.next();"]], "insertions": [{"line_number": 1413, "new_lines": ["        JSType actualType = getJSType(actual);", "        JSType formalType = getJSType(formal);", "        if (actualType != null && formalType != null && !actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString()));"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "        parameter = parameters.next();"], ["1413", "      argument = arguments.next();"]], "insertions": [{"line_number": 1413, "new_lines": ["        JSType actualType = getJSType(actual);", "        JSType formalType = getJSType(formal);", "        if (actualType != null && formalType != null && actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString()));"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "        parameter = parameters.next();"], ["1413", "      argument = arguments.next();"]], "insertions": [{"line_number": 1413, "new_lines": ["        JSType actualType = getJSType(actual) != null ? getJSType(actual) : JSType.UNKNOWN;", "        JSType formalType = getJSType(formal) != null ? getJSType(formal) : JSType.UNKNOWN;", "        if (actualType != null && formalType != null && actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString()));"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1409", "           parameters.hasNext()) {"], ["1412", "        parameter = parameters.next();"], ["1413", "      argument = arguments.next();"]], "insertions": [{"line_number": 1413, "new_lines": ["        JSType actualType = getJSType(actual) != null ? getJSType(actual) : JSType.UNKNOWN;", "        JSType formalType = getJSType(formal) != null ? getJSType(formal) : JSType.UNKNOWN;", "        if (actualType != null && formalType != null && actualType != JSType.UNKNOWN && formalType != JSType.UNKNOWN && actualType.isSubtypeOf(formalType)) {", "          warnings.add(JSError.make(node, MISMATCH_TYPE_WARNING,", "              actualType.toString(), formalType.toString()));"]}]}]
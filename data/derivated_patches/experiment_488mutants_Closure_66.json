[{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["// Adding missing logic to fix the bug"]}, {"line_number": 517, "new_lines": ["// Adding missing logic to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["return true; // Inserting return statement to fix the bug"]}, {"line_number": 517, "new_lines": ["return false; // Inserting return statement to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["// Fixing the bug by adding a check here"]}, {"line_number": 517, "new_lines": ["if (condition) { doSomething(); } // Adding conditional logic to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["int x = 0; // Adding initialization to fix the bug"]}, {"line_number": 517, "new_lines": ["int y = 0; // Adding initialization to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["// Bug fix: adding missing code here"]}, {"line_number": 517, "new_lines": ["// Bug fix: adding missing code here"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["return true; // Inserting return statement to fix the bug          // Object literal keys are not typeable"]}, {"line_number": 517, "new_lines": ["return false; // Inserting return statement to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["return true; // Inserting return statement to fix the bug          // Object literal keys are not typeable"]}, {"line_number": 517, "new_lines": ["return true; // Inserting return statement to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["return false; // Inserting return statement to fix the bug          // Object literal keys are not typeable"]}, {"line_number": 517, "new_lines": ["return false; // Inserting return statement to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["return true; // Inserting return statement to fix the bug          // Object literal keys are not typeable"]}, {"line_number": 517, "new_lines": ["return null; // Inserting return statement to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["return false; // Inserting return statement to fix the bug          // Object literal keys are not typeable"]}, {"line_number": 517, "new_lines": ["return true; // Inserting return statement to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["return true; // Inserting return statement to fix the bug          // Object literal keys are not typeable"]}, {"line_number": 517, "new_lines": ["return 1; // Inserting return statement to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["return false; // Inserting return statement to fix the bug          // Object literal keys are not typeable"]}, {"line_number": 517, "new_lines": ["return false; // Inserting return statement to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["return true; // Inserting return statement to fix the bug          // Object literal keys are not typeable"]}, {"line_number": 517, "new_lines": ["return false; // Inserting return statement to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["return false; // Inserting return statement to fix the bug          // Object literal keys are not typeable"]}, {"line_number": 517, "new_lines": ["return true; // Inserting return statement to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["return false; // Inserting return statement to fix the bug          // Object literal keys are not typeable"]}, {"line_number": 517, "new_lines": ["return null; // Inserting return statement to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable object literal keys"]}, {"line_number": 517, "new_lines": ["return true; // Inserting return statement to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return true; // Fixing the bug by returning true for typeable object literal keys"]}, {"line_number": 517, "new_lines": ["return false; // Inserting return statement to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable object literal keys"]}, {"line_number": 517, "new_lines": ["return true; // Inserting return statement to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return true; // Fixing the bug by returning true for typeable object literal keys"]}, {"line_number": 517, "new_lines": ["return false; // Inserting return statement to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable object literal keys"]}, {"line_number": 517, "new_lines": ["return true; // Inserting return statement to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Mutation: Added new line to address the issue"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Potential fix added here to correct the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Bug fix: Added line to address the issue"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Code added to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Added line as a potential fix for the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Added line to fix the issue"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Line added to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted line to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Added to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable object literal keys"]}, {"line_number": 517, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable object literal keys"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return true; // Fixing the bug by returning true for typeable object literal keys"]}, {"line_number": 517, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return true; // Fixing the bug by returning true for typeable object literal keys"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return true; // Fixing the bug by returning true for object literal keys"]}, {"line_number": 517, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable object literal keys"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable keys"]}, {"line_number": 517, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return true; // Fixing the bug by returning true for typeable keys"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return true; // Fixing the bug by returning true for object keys"]}, {"line_number": 517, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-object keys"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-object keys"]}, {"line_number": 517, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return true; // Fixing the bug by returning true for object keys"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return true; // Fixing the bug by returning true for object literal keys"]}, {"line_number": 517, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return true; // Fixing the bug by returning true for object literal keys"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable keys"]}, {"line_number": 517, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable keys"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return true; // Fixing the bug by returning true for typeable keys"]}, {"line_number": 517, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return true; // Fixing the bug by returning true for typeable keys"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for object literal keys"]}, {"line_number": 517, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return true; // Fixing the bug by returning true for non-object literal keys"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isArrayLit()) {", "            Node elem = node.getFirstChild();", "            while (elem != null) {", "                if (!elem.isString()) {", "                    report(JSError.make(elem, ARRAY_LITERAL_ELEMENT_NOT_STRING));", "                }", "                elem = elem.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isCall()) {", "            Node callee = node.getFirstChild();", "            if (callee.isName()) {", "                String methodName = callee.getString();", "                if (methodName.equals(\"foo\")) {", "                    report(JSError.make(callee, INVALID_METHOD_CALL));", "                }", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isString()) {", "            if (node.getString().isEmpty()) {", "                report(JSError.make(node, EMPTY_STRING_LITERAL));", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isFunction()) {", "            Node functionName = node.getFirstChild();", "            if (!functionName.isName()) {", "                report(JSError.make(functionName, INVALID_FUNCTION_NAME));", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isExprResult()) {", "            Node expr = node.getFirstChild();", "            if (expr.isString()) {", "                report(JSError.make(expr, INVALID_EXPRESSION_RESULT));", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isGetProp()) {", "            Node propAccess = node.getFirstChild();", "            if (!propAccess.isString()) {", "                report(JSError.make(propAccess, INVALID_PROPERTY_ACCESS));", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isBlock()) {", "            Node child = node.getFirstChild();", "            while (child != null) {", "                if (!child.isExprResult()) {", "                    report(JSError.make(child, NON_EXPRESSION_STATEMENT));", "                }", "                child = child.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isStringKey()) {", "            Node key = node.getFirstChild();", "            if (!key.isString()) {", "                report(JSError.make(key, INVALID_STRING_KEY));", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable object literal keys"]}, {"line_number": 517, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable object literal keys"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable object literal keys"]}, {"line_number": 517, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable object literal keys"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable object literal keys"]}, {"line_number": 517, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable object literal keys"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable object literal keys"]}, {"line_number": 517, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable object literal keys"]}], "deletions": [], "modifications": []}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable object literal keys"]}, {"line_number": 517, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable object literal keys"]}], "deletions": [], "modifications": []}]
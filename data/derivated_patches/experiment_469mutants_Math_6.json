[{"file_name": "org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java", "target_lines": [["191", "        int iter = 0;"], ["193", "            ++iter;"], ["227", "                    stop = checker.converged(iter, previous, current);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 191, "modified_line": "        int iter = 1;"}, {"line_number": 193, "modified_line": "            iter += 2;"}, {"line_number": 227, "modified_line": "                    stop = checker.converged(++iter, previous, current);"}]}, {"file_name": "org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java", "target_lines": [["214", "        int iter = 0;"], ["217", "            ++iter;"], ["223", "                if (checker.converged(iter, previous, current)) {"], ["277", "            if (iter % n == 0 ||"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 214, "modified_line": "        int iter = 1;"}, {"line_number": 217, "modified_line": "            iter += 2;"}, {"line_number": 223, "modified_line": "                if (checker.converged(++iter, previous, current)) {"}, {"line_number": 277, "modified_line": "            if (++iter % n == 0 ||"}]}, {"file_name": "org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java", "target_lines": [["158", "            if (iteration > 0) {"], ["175", "\t\t\t++iteration;"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 158, "modified_line": "            if (iteration >= 0) {"}, {"line_number": 175, "modified_line": "\t\t\titeration++;"}]}, {"file_name": "org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java", "target_lines": [["106", "        int iter = 0;"], ["108", "            ++iter;"], ["160", "                converged = checker.converged(iter, previous, current);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 106, "modified_line": "        int iter = 1;"}, {"line_number": 108, "modified_line": "            iter += 2;"}, {"line_number": 160, "modified_line": "                converged = checker.converged(++iter, previous, current);"}]}, {"file_name": "org/apache/commons/math3/optim/BaseOptimizer.java", "target_lines": [["51", "        iterations = new Incrementor(0, new MaxIterCallback());"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 51, "modified_line": "        iterations = new Incrementor(1, new MaxIterCallback());"}]}, {"file_name": "org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java", "target_lines": [["322", "        int iter = 0;"], ["325", "            ++iter;"], ["489", "                        if (checker.converged(iter, previous, current)) {"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 322, "modified_line": "        int iter = 1;"}, {"line_number": 325, "modified_line": "            iter += 2;"}, {"line_number": 489, "modified_line": "                        if (checker.converged(++iter, previous, current)) {"}]}, {"file_name": "org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java", "target_lines": [["388", "//"]], "insertions": [{"line_number": 388, "new_lines": ["        if (iter >= maxIterations) {", "            stop = true;", "        } else {", "            stop = checker.converged(iter, previous, current);", "        }"]}], "deletions": [], "modifications": []}, {"file_name": "org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java", "target_lines": [["191", "        int iter = 0;"], ["193", "            ++iter;"], ["227", "                    stop = checker.converged(iter, previous, current);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 191, "modified_line": "        int iter = 1;"}, {"line_number": 193, "modified_line": "            iter += 2;"}, {"line_number": 227, "modified_line": "                    stop = checker.converged(iter+1, previous, current);"}]}, {"file_name": "org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java", "target_lines": [["214", "        int iter = 0;"], ["217", "            ++iter;"], ["223", "                if (checker.converged(iter, previous, current)) {"], ["277", "            if (iter % n == 0 ||"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 214, "modified_line": "        int iter = 1;"}, {"line_number": 217, "modified_line": "            iter += 2;"}, {"line_number": 223, "modified_line": "                if (checker.converged(iter+1, previous, current)) {"}, {"line_number": 277, "modified_line": "            if (iter % n == 1 ||"}]}, {"file_name": "org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java", "target_lines": [["158", "            if (iteration > 0) {"], ["175", "\t\t\t++iteration;"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 158, "modified_line": "            if (iteration <= 0) {"}, {"line_number": 175, "modified_line": "\t\t\titeration += 2;"}]}, {"file_name": "org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java", "target_lines": [["106", "        int iter = 0;"], ["108", "            ++iter;"], ["160", "                converged = checker.converged(iter, previous, current);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 106, "modified_line": "        int iter = 1;"}, {"line_number": 108, "modified_line": "            iter += 2;"}, {"line_number": 160, "modified_line": "                converged = checker.converged(iter+1, previous, current);"}]}, {"file_name": "org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java", "target_lines": [["322", "        int iter = 0;"], ["325", "            ++iter;"], ["489", "                        if (checker.converged(iter, previous, current)) {"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 322, "modified_line": "        int iter = 1;"}, {"line_number": 325, "modified_line": "            iter += 2;"}, {"line_number": 489, "modified_line": "                        if (checker.converged(iter+1, previous, current)) {"}]}, {"file_name": "org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java", "target_lines": [["388", "//"]], "insertions": [{"line_number": 388, "new_lines": ["        if (iter >= maxIterations) {", "            stop = true;", "        } else {", "            stop = checker.converged(iter+1, previous, current);", "        }"]}], "deletions": [], "modifications": []}, {"file_name": "org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java", "target_lines": [["191", "        int iter = 0;"], ["193", "            ++iter;"], ["227", "                    stop = checker.converged(iter, previous, current);"]], "insertions": [{"line_number": 191, "new_lines": ["        int iter = 1;"]}, {"line_number": 193, "new_lines": ["            iter += 2;"]}, {"line_number": 227, "new_lines": ["                    stop = iter > maxIterations;"]}], "deletions": [], "modifications": []}, {"file_name": "org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java", "target_lines": [["214", "        int iter = 0;"], ["217", "            ++iter;"], ["223", "                if (checker.converged(iter, previous, current)) {"], ["277", "            if (iter % n == 0 ||"]], "insertions": [{"line_number": 214, "new_lines": ["        int iter = 1;"]}, {"line_number": 217, "new_lines": ["            iter += 2;"]}, {"line_number": 223, "new_lines": ["                if (iter >= maxIterations) {", "                    stop = true;", "                } else {", "                    stop = checker.converged(iter, previous, current);", "                "]}, {"line_number": 277, "new_lines": ["            if (iter % n == 0 || iter > maxIterations"]}], "deletions": [], "modifications": []}, {"file_name": "org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java", "target_lines": [["158", "            if (iteration > 0) {"], ["175", "\t\t\t++iteration;"]], "insertions": [{"line_number": 158, "new_lines": ["            if (iteration >= maxIterations) {", "                break;", "            "]}, {"line_number": 175, "new_lines": ["\t\t\tif (iteration >= maxIterations) {", "\t\t\t    break;", "\t\t\t}"]}], "deletions": [], "modifications": []}, {"file_name": "org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java", "target_lines": [["106", "        int iter = 0;"], ["108", "            ++iter;"], ["160", "                converged = checker.converged(iter, previous, current);"]], "insertions": [{"line_number": 106, "new_lines": ["        int iter = 1;"]}, {"line_number": 108, "new_lines": ["            iter += 2;"]}, {"line_number": 160, "new_lines": ["                if (iter >= maxIterations) {", "                    stop = true;", "                } else {", "                    stop = checker.converged(iter, previous, current);", "                "]}], "deletions": [], "modifications": []}, {"file_name": "org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java", "target_lines": [["322", "        int iter = 0;"], ["325", "            ++iter;"], ["489", "                        if (checker.converged(iter, previous, current)) {"]], "insertions": [{"line_number": 322, "new_lines": ["        int iter = 1;"]}, {"line_number": 325, "new_lines": ["            iter += 2;"]}, {"line_number": 489, "new_lines": ["                        if (iter >= maxIterations) {", "                            stop = true;", "                        } else {", "                            stop = checker.converged(iter, previous, current);", "                        "]}], "deletions": [], "modifications": []}, {"file_name": "org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java", "target_lines": [["388", "//"]], "insertions": [{"line_number": 388, "new_lines": ["        if (iter >= maxIterations) {", "            stop = true;", "        } else {", "            stop = checker.converged(iter, previous, current);", "        "]}], "deletions": [], "modifications": []}]
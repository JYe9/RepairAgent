[{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["        if (appendTo == null) return null;"]}], "deletions": [], "modifications": []}, {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["        if (escapingOn) return appendTo.append(QUOTE);"]}], "deletions": [], "modifications": []}, {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["        if (escapingOn) {", "            return appendTo == null ? null : appendTo.append(QUOTE);", "        }"]}], "deletions": [], "modifications": []}, {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["        if (escapingOn && appendTo != null) {", "            return appendTo.append(QUOTE);", "        }"]}], "deletions": [], "modifications": []}, {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["        if (escapingOn && appendTo != null) { return appendTo.append(QUOTE); }"]}], "deletions": [], "modifications": []}, {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["        // Inserted line to fix OutOfMemoryError: Java heap space\n"]}], "deletions": [], "modifications": []}, {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["// Handle escaped quotes more efficiently to prevent OutOfMemoryError", "if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "pos.setIndex(i + ESCAPED_QUOTE.length());", "lastHold = pos.getIndex();", "continue;", "}"]}]}, {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["// Updated logic to handle escaped quotes more efficiently", "if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "pos.setIndex(i + ESCAPED_QUOTE.length());", "lastHold = pos.getIndex();", "continue;", "}"]}]}, {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["// Fix for handling escaped quotes efficiently to prevent OOM", "if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "pos.setIndex(i + ESCAPED_QUOTE.length());", "lastHold = pos.getIndex();", "continue;", "}"]}]}, {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["// Optimize escaped quotes handling to avoid OutOfMemoryError", "if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "pos.setIndex(i + ESCAPED_QUOTE.length());", "lastHold = pos.getIndex();", "continue;", "}"]}]}, {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["// Enhance handling of escaped quotes for memory optimization", "if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "pos.setIndex(i + ESCAPED_QUOTE.length());", "lastHold = pos.getIndex();", "continue;", "}"]}]}, {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["// Fix for OutOfMemoryError by handling escaped quotes efficiently", "if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "pos.setIndex(i + ESCAPED_QUOTE.length());", "lastHold = pos.getIndex();", "continue;", "}"]}]}, {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["// Improved handling of escaped quotes to prevent OOM error", "if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "pos.setIndex(i + ESCAPED_QUOTE.length());", "lastHold = pos.getIndex();", "continue;", "}"]}]}, {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["// Update for handling escaped quotes more efficiently", "if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "pos.setIndex(i + ESCAPED_QUOTE.length());", "lastHold = pos.getIndex();", "continue;", "}"]}]}, {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["// Fix to handle escaped quotes better and prevent OOM issue", "if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "pos.setIndex(i + ESCAPED_QUOTE.length());", "lastHold = pos.getIndex();", "continue;", "}"]}]}, {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["// Optimize handling of escaped quotes to avoid OOM error", "if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "pos.setIndex(i + ESCAPED_QUOTE.length());", "lastHold = pos.getIndex();", "continue;", "}"]}]}, {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["// Efficiently handle escaped quotes to prevent OutOfMemoryError", "if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "pos.setIndex(i + ESCAPED_QUOTE.length());", "lastHold = pos.getIndex();", "continue;", "}"]}]}, {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["// Update escaped quotes handling for better memory usage", "if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "pos.setIndex(i + ESCAPED_QUOTE.length());", "lastHold = pos.getIndex();", "continue;", "}"]}]}, {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["// Fix for OutOfMemoryError caused by inefficient escaped quotes handling", "if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "pos.setIndex(i + ESCAPED_QUOTE.length());", "lastHold = pos.getIndex();", "continue;", "}"]}]}, {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["// Enhance escaped quotes processing to prevent OutOfMemoryError", "if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "pos.setIndex(i + ESCAPED_QUOTE.length());", "lastHold = pos.getIndex();", "continue;", "}"]}]}, {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["// Improve handling of escaped quotes to avoid OutOfMemoryError", "if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "pos.setIndex(i + ESCAPED_QUOTE.length());", "lastHold = pos.getIndex();", "continue;", "}"]}]}, {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["// Fix to handle escaped quotes more efficiently and prevent OOM issue", "if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "pos.setIndex(i + ESCAPED_QUOTE.length());", "lastHold = pos.getIndex();", "continue;", "}"]}]}, {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["// Optimize escaped quotes processing to prevent OOM error", "if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "pos.setIndex(i + ESCAPED_QUOTE.length());", "lastHold = pos.getIndex();", "continue;", "}"]}]}, {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["// Efficient handling of escaped quotes to avoid OutOfMemoryError", "if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "pos.setIndex(i + ESCAPED_QUOTE.length());", "lastHold = pos.getIndex();", "continue;", "}"]}]}, {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["// Update escaped quotes handling for better memory optimization", "if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "pos.setIndex(i + ESCAPED_QUOTE.length());", "lastHold = pos.getIndex();", "continue;", "}"]}]}, {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["// Fix for OutOfMemoryError due to inefficient escaped quotes handling", "if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "pos.setIndex(i + ESCAPED_QUOTE.length());", "lastHold = pos.getIndex();", "continue;", "}"]}]}, {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["// Enhance escaped quotes processing to avoid OutOfMemoryError", "if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "pos.setIndex(i + ESCAPED_QUOTE.length());", "lastHold = pos.getIndex();", "continue;", "}"]}]}, {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["// Improve handling of escaped quotes for prevention of OOM error", "if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "pos.setIndex(i + ESCAPED_QUOTE.length());", "lastHold = pos.getIndex();", "continue;", "}"]}]}, {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["// Handle escaped quotes more efficiently to prevent OutOfMemoryError", "if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "pos.setIndex(i + ESCAPED_QUOTE.length());", "lastHold = pos.getIndex();", "continue;"]}]}, {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["// Handle escaped quotes more efficiently to prevent OutOfMemoryError", "if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "pos.setIndex(i + ESCAPED_QUOTE.length());", "lastHold = pos.getIndex();", "continue;"]}]}]
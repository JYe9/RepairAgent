[{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["112", "                    try {"], ["113", "                        if (Charset.isSupported(meta.attr(\"charset\"))) {"], ["115", "                        }"], ["116", "                    } catch (IllegalCharsetNameException e) {"], ["117", "                        foundCharset = null;"], ["118", "                    }"]], "insertions": [], "deletions": [112, 113, 115, 116, 117, 118], "modifications": []}, {"file_name": "org/jsoup/nodes/XmlDeclaration.java", "target_lines": [["46", "        final String decl = this.name;"], ["47", "        if(decl.equals(\"xml\") && attributes.size() > 1 ) {"], ["48", "            StringBuilder sb = new StringBuilder(decl);"], ["49", "            final String version = attributes.get(\"version\");"], ["50", "            if( version != null ) {"], ["51", "                sb.append(\" version=\\\"\").append(version).append(\"\\\"\");"], ["52", "            }"], ["53", "            final String encoding = attributes.get(\"encoding\");"], ["54", "            if( encoding != null ) {"], ["55", "                sb.append(\" encoding=\\\"\").append(encoding).append(\"\\\"\");"], ["56", "            }"], ["57", "            return sb.toString();"], ["58", "        }"], ["59", "        else {"], ["60", "            return this.name;"], ["61", "        }"], ["68", "                .append(getWholeDeclaration())"]], "insertions": [], "deletions": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 68], "modifications": []}, {"file_name": "org/jsoup/parser/XmlTreeBuilder.java", "target_lines": [["76", "                String declaration = data.substring(1);"], ["77", "                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));"], ["3", "//"]], "insertions": [], "deletions": [3], "modifications": []}, {"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["112", "                    try {"], ["113", "                        if (!Charset.isSupported(meta.attr(\"charset\"))) {"], ["115", "                        foundCharset = null;"], ["116", "                    } catch (IllegalCharsetNameException e) {"], ["117", "                        foundCharset = null;"], ["118", "                    }"]], "insertions": [], "deletions": [113], "modifications": []}, {"file_name": "org/jsoup/nodes/XmlDeclaration.java", "target_lines": [["53", "            sb.append(\" encoding=\\\"\" + encoding + \"\\\"\");"]], "insertions": [], "deletions": [], "modifications": []}, {"file_name": "org/jsoup/parser/XmlTreeBuilder.java", "target_lines": [["3", "//"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 3, "modified_line": "// Insert code here to handle the XML tree building"}]}, {"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["112", "                    try {"], ["113", "                        if (Charset.isSupported(meta.attr(\"charset\"))) {"], ["115", "                        }"], ["116", "                    } catch (IllegalCharsetNameException e) {"], ["117", "                        foundCharset = null;"], ["118", "                    }"]], "insertions": [], "deletions": [112, 113, 115, 116, 117, 118], "modifications": []}, {"file_name": "org/jsoup/nodes/XmlDeclaration.java", "target_lines": [["46", "        final String decl = this.name;"], ["47", "        if(decl.equals(\"xml\") && attributes.size() > 1 ) {"], ["48", "            StringBuilder sb = new StringBuilder(decl);"], ["49", "            final String version = attributes.get(\"version\");"], ["50", "            if( version != null ) {"], ["51", "                sb.append(\" version=\\\"\").append(version).append(\"\\\"\");"], ["52", "            }"], ["53", "            final String encoding = attributes.get(\"encoding\");"], ["54", "            if( encoding != null ) {"], ["55", "                sb.append(\" encoding=\\\"\").append(encoding).append(\"\\\"\");"], ["56", "            }"], ["57", "            return sb.toString();"], ["58", "        }"], ["59", "        else {"], ["60", "            return this.name;"], ["61", "        }"], ["68", "                .append(getWholeDeclaration())"]], "insertions": [], "deletions": [68], "modifications": []}, {"file_name": "org/jsoup/parser/XmlTreeBuilder.java", "target_lines": [["76", "                String declaration = data.substring(1);"], ["77", "                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));"], ["3", "//"]], "insertions": [], "deletions": [3], "modifications": []}, {"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["112", "                    try {"], ["113", "                        if (Charset.isSupported(meta.attr(\"charset\"))) {"], ["115", "                        }"], ["116", "                    } catch (IllegalCharsetNameException e) {"], ["117", "                        foundCharset = null;"], ["118", "                    }"]], "insertions": [], "deletions": [112, 113, 115, 116, 117, 118], "modifications": []}, {"file_name": "org/jsoup/nodes/XmlDeclaration.java", "target_lines": [["46", "        final String decl = this.name;"], ["47", "        if(decl.equals(\"xml\") && attributes.size() > 1 ) {"], ["48", "            StringBuilder sb = new StringBuilder(decl);"], ["49", "            final String version = attributes.get(\"version\");"], ["50", "            if( version != null ) {"], ["51", "                sb.append(\" version=\\\"\").append(version).append(\"\\\"\");"], ["52", "            }"], ["53", "            final String encoding = attributes.get(\"encoding\");"], ["54", "            if( encoding != null ) {"], ["55", "                sb.append(\" encoding=\\\"\").append(encoding).append(\"\\\"\");"], ["56", "            }"], ["57", "            return sb.toString();"], ["58", "        }"], ["59", "        else {"], ["60", "            return this.name;"], ["61", "        }"], ["68", "                .append(getWholeDeclaration())"], ["76", "                String declaration = data.substring(1);"], ["77", "                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));"], ["3", "//"]], "insertions": [], "deletions": [76, 77, 3], "modifications": []}, {"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["112", "                    try {"], ["113", "                        if (Charset.isSupported(meta.attr(\"charset\"))) {"], ["115", "                        }"], ["116", "                    } catch (IllegalCharsetNameException e) {"], ["117", "                        foundCharset = null;"], ["118", "                    }"]], "insertions": [{"line_number": 114, "new_lines": ["// Inserted line for mutation"]}], "deletions": [112, 113, 115, 116, 117, 118], "modifications": []}, {"file_name": "org/jsoup/nodes/XmlDeclaration.java", "target_lines": [["46", "        final String decl = this.name;"], ["47", "        if(decl.equals(\"xml\") && attributes.size() > 1 ) {"], ["48", "            StringBuilder sb = new StringBuilder(decl);"], ["49", "            final String version = attributes.get(\"version\");"], ["50", "            if( version != null ) {"], ["51", "                sb.append(\" version=\\\"\").append(version).append(\"\\\"\");"], ["52", "            }"], ["53", "            final String encoding = attributes.get(\"encoding\");"], ["54", "            if( encoding != null ) {"], ["55", "                sb.append(\" encoding=\\\"\").append(encoding).append(\"\\\"\");"], ["56", "            }"], ["57", "            return sb.toString();"], ["58", "        }"], ["59", "        else {"], ["60", "            return this.name;"], ["61", "        }"], ["68", "                .append(getWholeDeclaration())"]], "insertions": [{"line_number": 58, "new_lines": ["// Inserted line for mutation"]}], "deletions": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 68], "modifications": []}, {"file_name": "org/jsoup/parser/XmlTreeBuilder.java", "target_lines": [["76", "                String declaration = data.substring(1);"], ["77", "                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));"], ["3", "//"]], "insertions": [{"line_number": 78, "new_lines": ["// Inserted line for mutation"]}], "deletions": [76, 77, 3], "modifications": []}, {"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["112", "                    try {"], ["113", "                        if (!Charset.isSupported(meta.attr(\"charset\"))) {"], ["115", "                        }"], ["116", "                    } catch (IllegalCharsetNameException e) {"], ["117", "                        foundCharset = null;"], ["118", "                    }"]], "insertions": [], "deletions": [], "modifications": []}, {"file_name": "org/jsoup/nodes/XmlDeclaration.java", "target_lines": [["46", "        final String decl = this.name;"], ["47", "        if(!decl.equals(\"xml\") || attributes.size() <= 1 ) {"], ["48", "            StringBuilder sb = new StringBuilder(decl);"], ["49", "            final String version = attributes.get(\"version\");"], ["50", "            if( version == null ) {"], ["51", "                sb.append(\" version=\\\"\").append(version).append(\"\\\"\");"], ["52", "            }"], ["53", "            final String encoding = attributes.get(\"encoding\");"], ["54", "            if( encoding == null ) {"], ["55", "                sb.append(\" encoding=\\\"\").append(encoding).append(\"\\\"\");"], ["56", "            }"], ["57", "            return sb.toString();"], ["58", "        }"], ["59", "        else {"], ["60", "            return this.name;"], ["61", "        }"], ["68", "                .append(getWholeDeclaration())"]], "insertions": [], "deletions": [], "modifications": []}, {"file_name": "org/jsoup/parser/XmlTreeBuilder.java", "target_lines": [["76", "                String declaration = data.substring(1);"], ["77", "                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));"], ["3", "return insert;"]], "insertions": [], "deletions": [], "modifications": []}, {"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["112", "                    try {"], ["113", "                        if (Charset.isSupported(meta.attr(\"charset\"))) {"], ["115", "                        }"], ["116", "                    } catch (IllegalCharsetNameException e) {"], ["117", "                        foundCharset = null;"], ["118", "                    }"]], "insertions": [], "deletions": [112, 113, 115, 116, 117, 118], "modifications": []}, {"file_name": "org/jsoup/nodes/XmlDeclaration.java", "target_lines": [["46", "        final String decl = this.name;"], ["47", "        if(decl.equals(\"xml\") && attributes.size() > 1 ) {"], ["48", "            StringBuilder sb = new StringBuilder(decl);"], ["49", "            final String version = attributes.get(\"version\");"], ["50", "            if( version != null ) {"], ["51", "                sb.append(\" version=\\\"\").append(version).append(\"\\\"\");"], ["52", "            }"], ["53", "            final String encoding = attributes.get(\"encoding\");"], ["54", "            if( encoding != null ) {"], ["55", "                sb.append(\" encoding=\\\"\").append(encoding).append(\"\\\"\");"], ["56", "            }"], ["57", "            return sb.toString();"], ["58", "        }"], ["59", "        else {"], ["60", "            return this.name;"], ["61", "        }"], ["68", "                .append(getWholeDeclaration())"]], "insertions": [], "deletions": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 68], "modifications": []}, {"file_name": "org/jsoup/parser/XmlTreeBuilder.java", "target_lines": [["76", "                String declaration = data.substring(1);"], ["77", "                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));"], ["3", "//"]], "insertions": [{"line_number": 3, "new_lines": ["// Inserted line to fix the bug"]}], "deletions": [3], "modifications": []}, {"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["112", "                    try {"], ["113", "                        if (Charset.isSupported(meta.attr(\"charset\"))) {"], ["115", "                        }"], ["116", "                    } catch (IllegalCharsetNameException e) {"], ["117", "                        foundCharset = null;"], ["118", "                    }"]], "insertions": [{"line_number": 114, "new_lines": ["// Inserted line for mutation"]}], "deletions": [], "modifications": []}, {"file_name": "org/jsoup/nodes/XmlDeclaration.java", "target_lines": [["53", "            final String encoding = attributes.get(\"encoding\");"]], "insertions": [{"line_number": 54, "new_lines": ["// Inserted line for mutation"]}], "deletions": [], "modifications": []}, {"file_name": "org/jsoup/parser/XmlTreeBuilder.java", "target_lines": [["3", "//"]], "insertions": [{"line_number": 4, "new_lines": ["// Inserted line for mutation"]}], "deletions": [], "modifications": []}, {"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["113", "                        if (!Charset.isSupported(meta.attr(\"charset\"))) {"], ["116", "                    } catch (IllegalCharsetNameException e) {"], ["117", "                        foundCharset = \"unknown\";"], ["118", "                    }"]], "insertions": [], "deletions": [112, 115], "modifications": []}, {"file_name": "org/jsoup/nodes/XmlDeclaration.java", "target_lines": [["53", "            if( encoding == null ) {"]], "insertions": [], "deletions": [], "modifications": []}, {"file_name": "org/jsoup/parser/XmlTreeBuilder.java", "target_lines": [["3", "insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));"]], "insertions": [{"line_number": 3, "new_lines": ["// Inserted new line to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["112", "                    try {"], ["113", "                        if (Charset.isSupported(meta.attr(\"charset\"))) {"], ["115", "                        }"], ["116", "                    } catch (IllegalCharsetNameException e) {"], ["117", "                        foundCharset = null;"], ["118", "                    }"]], "insertions": [], "deletions": [112, 113, 115, 116, 117, 118], "modifications": []}, {"file_name": "org/jsoup/nodes/XmlDeclaration.java", "target_lines": [["46", "        final String decl = this.name;"], ["47", "        if(decl.equals(\"xml\") && attributes.size() > 1 ) {"], ["48", "            StringBuilder sb = new StringBuilder(decl);"], ["49", "            final String version = attributes.get(\"version\");"], ["50", "            if( version != null ) {"], ["51", "                sb.append(\" version=\\\"\").append(version).append(\"\\\"\");"], ["52", "            }"], ["53", "            final String encoding = attributes.get(\"encoding\");"], ["54", "            if( encoding != null ) {"], ["55", "                sb.append(\" encoding=\\\"\").append(encoding).append(\"\\\"\");"], ["56", "            }"], ["57", "            return sb.toString();"], ["58", "        }"], ["59", "        else {"], ["60", "            return this.name;"], ["61", "        }"], ["68", "                .append(getWholeDeclaration())"]], "insertions": [], "deletions": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 68], "modifications": []}, {"file_name": "org/jsoup/parser/XmlTreeBuilder.java", "target_lines": [["76", "                String declaration = data.substring(1);"], ["77", "                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));"], ["3", "//"]], "insertions": [{"line_number": 3, "new_lines": ["// Mutation: Inserted line to fix bug"]}], "deletions": [3], "modifications": []}, {"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["112", "                    try {"], ["113", "                        if (Charset.isSupported(meta.attr(\"charset\"))) {"], ["115", "                        }"], ["116", "                    } catch (IllegalCharsetNameException e) {"], ["117", "                        foundCharset = null;"], ["118", "                    }"]], "insertions": [], "deletions": [112, 113, 115, 116, 117, 118], "modifications": []}, {"file_name": "org/jsoup/nodes/XmlDeclaration.java", "target_lines": [["46", "        final String decl = this.name;"], ["47", "        if(decl.equals(\"xml\") && attributes.size() > 1 ) {"], ["48", "            StringBuilder sb = new StringBuilder(decl);"], ["49", "            final String version = attributes.get(\"version\");"], ["50", "            if( version != null ) {"], ["51", "                sb.append(\" version=\\\"\").append(version).append(\"\\\"\");"], ["52", "            }"], ["53", "            final String encoding = attributes.get(\"encoding\");"], ["54", "            if( encoding != null ) {"], ["55", "                sb.append(\" encoding=\\\"\").append(encoding).append(\"\\\"\");"], ["56", "            }"], ["57", "            return sb.toString();"], ["58", "        }"], ["59", "        else {"], ["60", "            return this.name;"], ["61", "        }"], ["68", "                .append(getWholeDeclaration())"]], "insertions": [], "deletions": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 68], "modifications": []}, {"file_name": "org/jsoup/parser/XmlTreeBuilder.java", "target_lines": [["76", "                String declaration = data.substring(1);"], ["77", "                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));"], ["3", "//"]], "insertions": [{"line_number": 3, "new_lines": ["// Perform necessary XML tree building operations here"]}], "deletions": [3], "modifications": []}, {"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["112", "                    try {"], ["113", "                        if (!Charset.isSupported(meta.attr(\"charset\"))) {"], ["115", "                        }"], ["116", "                    } catch (IllegalCharsetNameException e) {"], ["117", "                        foundCharset = null;"], ["118", "                    }"]], "insertions": [], "deletions": [], "modifications": []}, {"file_name": "org/jsoup/nodes/XmlDeclaration.java", "target_lines": [["53", "            final String encoding = attributes.get(\"encoding\");"]], "insertions": [{"line_number": 53, "new_lines": ["if (encoding == null) {", "    return sb.toString();", "}"]}], "deletions": [], "modifications": []}, {"file_name": "org/jsoup/parser/XmlTreeBuilder.java", "target_lines": [["3", "//"]], "insertions": [{"line_number": 3, "new_lines": ["// Inserted line to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["112", "                    try {"], ["113", "                        if (Charset.isSupported(meta.attr(\"charset\"))) {"], ["115", "                        }"], ["116", "                    } catch (IllegalCharsetNameException e) {"], ["117", "                        foundCharset = null;"], ["118", "                    }"]], "insertions": [{"line_number": 3, "new_lines": ["// Inserted line to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "org/jsoup/nodes/XmlDeclaration.java", "target_lines": [["46", "        final String decl = this.name;"], ["47", "        if(decl.equals(\"xml\") && attributes.size() > 1 ) {"], ["48", "            StringBuilder sb = new StringBuilder(decl);"], ["49", "            final String version = attributes.get(\"version\");"], ["50", "            if( version != null ) {"], ["51", "                sb.append(\" version=\\\"\").append(version).append(\"\\\"\");"], ["52", "            }"], ["53", "            final String encoding = attributes.get(\"encoding\");"], ["54", "            if( encoding != null ) {"], ["55", "                sb.append(\" encoding=\\\"\").append(encoding).append(\"\\\"\");"], ["56", "            }"], ["57", "            return sb.toString();"], ["58", "        }"], ["59", "        else {"], ["60", "            return this.name;"], ["61", "        }"], ["68", "                .append(getWholeDeclaration())"]], "insertions": [{"line_number": 3, "new_lines": ["// Inserted line to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "org/jsoup/parser/XmlTreeBuilder.java", "target_lines": [["76", "                String declaration = data.substring(1);"], ["77", "                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));"], ["3", "//"]], "insertions": [{"line_number": 3, "new_lines": ["// Inserted line to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["112", "                    try {"], ["113", "                        if (!Charset.isSupported(meta.attr(\"charset\"))) {"], ["115", "                            foundCharset = null;"], ["116", "                        }"], ["117", "                    } catch (IllegalCharsetNameException e) {"], ["118", "                    }"]], "insertions": [], "deletions": [], "modifications": []}, {"file_name": "org/jsoup/nodes/XmlDeclaration.java", "target_lines": [["46", "        final String decl = this.name;"], ["47", "        if(decl.equals(\"xml\") && attributes.size() > 1 ) {"], ["48", "            StringBuilder sb = new StringBuilder(decl);"], ["49", "            final String version = attributes.get(\"version\");"], ["50", "            if( version != null ) {"], ["51", "                sb.append(\" version=\\\"\").append(version).append(\"\\\"\");"], ["52", "            }"], ["53", "            final String encoding = attributes.get(\"encoding\");"], ["54", "            if( encoding != null ) {"], ["55", "                sb.append(\" encoding=\\\"\").append(encoding).append(\"\\\"\");"], ["56", "            }"], ["57", "            return sb.toString();"], ["58", "        }"], ["59", "        else {"], ["60", "            return this.name;"], ["61", "        }"], ["68", "                .append(getWholeDeclaration())"]], "insertions": [], "deletions": [], "modifications": []}, {"file_name": "org/jsoup/parser/XmlTreeBuilder.java", "target_lines": [["76", "                String declaration = data.substring(1);"], ["77", "                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));"], ["3", "//"]], "insertions": [{"line_number": 3, "new_lines": ["// Inserted line to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["112", "                    try {"], ["113", "                        if (!Charset.isSupported(meta.attr(\"charset\"))) {"], ["115", "                        }"], ["116", "                    } catch (IllegalCharsetNameException e) {"], ["117", "                        foundCharset = null;"], ["118", "                    }"]], "insertions": [], "deletions": [], "modifications": []}, {"file_name": "org/jsoup/nodes/XmlDeclaration.java", "target_lines": [["46", "        final String decl = this.name;"], ["47", "        if(decl.equals(\"xml\") || attributes.size() > 1 ) {"], ["48", "            StringBuilder sb = new StringBuilder(decl);"], ["49", "            final String version = attributes.get(\"version\");"], ["50", "            if( version != null ) {"], ["51", "                sb.append(\" version=\\\"\").append(version).append(\"\\\"\");"], ["52", "            }"], ["53", "            final String encoding = attributes.get(\"encoding\");"], ["54", "            if( encoding != null ) {"], ["55", "                sb.append(\" encoding=\\\"\").append(encoding).append(\"\\\"\");"], ["56", "            }"], ["57", "            return sb.toString();"], ["58", "        }"], ["59", "        else {"], ["60", "            return this.name;"], ["61", "        }"], ["68", "                .append(getWholeDeclaration())"]], "insertions": [], "deletions": [], "modifications": []}, {"file_name": "org/jsoup/parser/XmlTreeBuilder.java", "target_lines": [["76", "                String declaration = data.substring(1);"], ["77", "                insert = new XmlDeclaration(declaration, comment.baseUri(), !data.startsWith(\"!\"));"], ["3", "//"]], "insertions": [], "deletions": [], "modifications": []}, {"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["112", "                    try {"], ["113", "                        if (Charset.isSupported(meta.attr(\"charset\"))) {"], ["115", "                        }"], ["116", "                    } catch (IllegalCharsetNameException e) {"], ["117", "                        foundCharset = null;"], ["118", "                    }"]], "insertions": [{"line_number": 3, "new_lines": ["// Fixing the bug by adding missing logic here"]}], "deletions": [], "modifications": []}, {"file_name": "org/jsoup/nodes/XmlDeclaration.java", "target_lines": [["46", "        final String decl = this.name;"], ["47", "        if(decl.equals(\"xml\") && attributes.size() > 1 ) {"], ["48", "            StringBuilder sb = new StringBuilder(decl);"], ["49", "            final String version = attributes.get(\"version\");"], ["50", "            if( version != null ) {"], ["51", "                sb.append(\" version=\\\"\").append(version).append(\"\\\"\");"], ["52", "            }"], ["53", "            final String encoding = attributes.get(\"encoding\");"], ["54", "            if( encoding != null ) {"], ["55", "                sb.append(\" encoding=\\\"\").append(encoding).append(\"\\\"\");"], ["56", "            }"], ["57", "            return sb.toString();"], ["58", "        }"], ["59", "        else {"], ["60", "            return this.name;"], ["61", "        }"], ["68", "                .append(getWholeDeclaration())"]], "insertions": [{"line_number": 3, "new_lines": ["// Insert missing line to handle encoding declaration"]}], "deletions": [], "modifications": []}, {"file_name": "org/jsoup/parser/XmlTreeBuilder.java", "target_lines": [["76", "                String declaration = data.substring(1);"], ["77", "                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));"], ["3", "//"]], "insertions": [{"line_number": 3, "new_lines": ["// Add missing logic here to fix the bug"]}], "deletions": [], "modifications": []}, {"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["112", "                    try {"], ["113", "                        if (Charset.isSupported(meta.attr(\"charset\"))) {"], ["115", "                        }"], ["116", "                    } catch (IllegalCharsetNameException e) {"], ["117", "                        foundCharset = null;"], ["118", "                    }"]], "insertions": [{"line_number": 3, "new_lines": ["// Inserted line to fix the bug"]}], "deletions": [112, 113, 115, 116, 117, 118], "modifications": []}, {"file_name": "org/jsoup/nodes/XmlDeclaration.java", "target_lines": [["46", "        final String decl = this.name;"], ["47", "        if(decl.equals(\"xml\") && attributes.size() > 1 ) {"], ["48", "            StringBuilder sb = new StringBuilder(decl);"], ["49", "            final String version = attributes.get(\"version\");"], ["50", "            if( version != null ) {"], ["51", "                sb.append(\" version=\\\"\").append(version).append(\"\\\"\");"], ["52", "            }"], ["53", "            final String encoding = attributes.get(\"encoding\");"], ["54", "            if( encoding != null ) {"], ["55", "                sb.append(\" encoding=\\\"\").append(encoding).append(\"\\\"\");"], ["56", "            }"], ["57", "            return sb.toString();"], ["58", "        }"], ["59", "        else {"], ["60", "            return this.name;"], ["61", "        }"], ["68", "                .append(getWholeDeclaration())"]], "insertions": [{"line_number": 3, "new_lines": ["// Inserted line to fix the bug"]}], "deletions": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 68], "modifications": []}, {"file_name": "org/jsoup/parser/XmlTreeBuilder.java", "target_lines": [["76", "                String declaration = data.substring(1);"], ["77", "                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));"], ["3", "//"]], "insertions": [{"line_number": 3, "new_lines": ["// Inserted line to fix the bug"]}], "deletions": [76, 77, 3], "modifications": []}, {"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["112", "                    try {"], ["113", "                        if (Charset.isSupported(meta.attr(\"charset\"))) {"], ["115", "                        }"], ["116", "                    } catch (IllegalCharsetNameException e) {"], ["117", "                        foundCharset = null;"], ["118", "                    }"]], "insertions": [], "deletions": [112, 113, 115, 116, 117, 118], "modifications": []}, {"file_name": "org/jsoup/nodes/XmlDeclaration.java", "target_lines": [["46", "        final String decl = this.name;"], ["47", "        if(decl.equals(\"xml\") && attributes.size() > 1 ) {"], ["48", "            StringBuilder sb = new StringBuilder(decl);"], ["49", "            final String version = attributes.get(\"version\");"], ["50", "            if( version != null ) {"], ["51", "                sb.append(\" version=\\\"\").append(version).append(\"\\\"\");"], ["52", "            }"], ["53", "            final String encoding = attributes.get(\"encoding\");"], ["54", "            if( encoding != null ) {"], ["55", "                sb.append(\" encoding=\\\"\").append(encoding).append(\"\\\"\");"], ["56", "            }"], ["57", "            return sb.toString();"], ["58", "        }"], ["59", "        else {"], ["60", "            return this.name;"], ["61", "        }"], ["68", "                .append(getWholeDeclaration())"]], "insertions": [], "deletions": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 68], "modifications": []}, {"file_name": "org/jsoup/parser/XmlTreeBuilder.java", "target_lines": [["76", "                String declaration = data.substring(1);"], ["77", "                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));"], ["3", "//"]], "insertions": [], "deletions": [76, 77, 3], "modifications": []}, {"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["112", "                    try {"], ["113", "                        if (Charset.isSupported(meta.attr(\"charset\"))) {"], ["115", "                        }"], ["116", "                    } catch (IllegalCharsetNameException e) {"], ["117", "                        foundCharset = null;"], ["118", "                    }"]], "insertions": [], "deletions": [112, 113, 115, 116, 117, 118], "modifications": []}, {"file_name": "org/jsoup/nodes/XmlDeclaration.java", "target_lines": [["46", "        final String decl = this.name;"], ["47", "        if(decl.equals(\"xml\") && attributes.size() > 1 ) {"], ["48", "            StringBuilder sb = new StringBuilder(decl);"], ["49", "            final String version = attributes.get(\"version\");"], ["50", "            if( version != null ) {"], ["51", "                sb.append(\" version=\\\"\").append(version).append(\"\\\"\");"], ["52", "            }"], ["53", "            final String encoding = attributes.get(\"encoding\");"], ["54", "            if( encoding != null ) {"], ["55", "                sb.append(\" encoding=\\\"\").append(encoding).append(\"\\\"\");"], ["56", "            }"], ["57", "            return sb.toString();"], ["58", "        }"], ["59", "        else {"], ["60", "            return this.name;"], ["61", "        }"], ["68", "                .append(getWholeDeclaration())"]], "insertions": [], "deletions": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 68], "modifications": []}, {"file_name": "org/jsoup/parser/XmlTreeBuilder.java", "target_lines": [["76", "                String declaration = data.substring(1);"], ["77", "                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));"], ["3", "//"]], "insertions": [{"line_number": 3, "new_lines": ["// Inserted line to fix the bug"]}], "deletions": [3], "modifications": []}]